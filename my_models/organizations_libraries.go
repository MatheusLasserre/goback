// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrganizationsLibrary is an object representing the database table.
type OrganizationsLibrary struct {
	ID             int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationId int64 `boil:"organizationId" json:"organizationId" toml:"organizationId" yaml:"organizationId"`
	LibraryId      int   `boil:"libraryId" json:"libraryId" toml:"libraryId" yaml:"libraryId"`

	R *organizationsLibraryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationsLibraryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationsLibraryColumns = struct {
	ID             string
	OrganizationId string
	LibraryId      string
}{
	ID:             "id",
	OrganizationId: "organizationId",
	LibraryId:      "libraryId",
}

var OrganizationsLibraryTableColumns = struct {
	ID             string
	OrganizationId string
	LibraryId      string
}{
	ID:             "organizations_libraries.id",
	OrganizationId: "organizations_libraries.organizationId",
	LibraryId:      "organizations_libraries.libraryId",
}

// Generated where

var OrganizationsLibraryWhere = struct {
	ID             whereHelperint64
	OrganizationId whereHelperint64
	LibraryId      whereHelperint
}{
	ID:             whereHelperint64{field: "`organizations_libraries`.`id`"},
	OrganizationId: whereHelperint64{field: "`organizations_libraries`.`organizationId`"},
	LibraryId:      whereHelperint{field: "`organizations_libraries`.`libraryId`"},
}

// OrganizationsLibraryRels is where relationship names are stored.
var OrganizationsLibraryRels = struct {
}{}

// organizationsLibraryR is where relationships are stored.
type organizationsLibraryR struct {
}

// NewStruct creates a new relationship struct
func (*organizationsLibraryR) NewStruct() *organizationsLibraryR {
	return &organizationsLibraryR{}
}

// organizationsLibraryL is where Load methods for each relationship are stored.
type organizationsLibraryL struct{}

var (
	organizationsLibraryAllColumns            = []string{"id", "organizationId", "libraryId"}
	organizationsLibraryColumnsWithoutDefault = []string{"organizationId", "libraryId"}
	organizationsLibraryColumnsWithDefault    = []string{"id"}
	organizationsLibraryPrimaryKeyColumns     = []string{"id"}
	organizationsLibraryGeneratedColumns      = []string{}
)

type (
	// OrganizationsLibrarySlice is an alias for a slice of pointers to OrganizationsLibrary.
	// This should almost always be used instead of []OrganizationsLibrary.
	OrganizationsLibrarySlice []*OrganizationsLibrary
	// OrganizationsLibraryHook is the signature for custom OrganizationsLibrary hook methods
	OrganizationsLibraryHook func(context.Context, boil.ContextExecutor, *OrganizationsLibrary) error

	organizationsLibraryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationsLibraryType                 = reflect.TypeOf(&OrganizationsLibrary{})
	organizationsLibraryMapping              = queries.MakeStructMapping(organizationsLibraryType)
	organizationsLibraryPrimaryKeyMapping, _ = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, organizationsLibraryPrimaryKeyColumns)
	organizationsLibraryInsertCacheMut       sync.RWMutex
	organizationsLibraryInsertCache          = make(map[string]insertCache)
	organizationsLibraryUpdateCacheMut       sync.RWMutex
	organizationsLibraryUpdateCache          = make(map[string]updateCache)
	organizationsLibraryUpsertCacheMut       sync.RWMutex
	organizationsLibraryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationsLibraryAfterSelectHooks []OrganizationsLibraryHook

var organizationsLibraryBeforeInsertHooks []OrganizationsLibraryHook
var organizationsLibraryAfterInsertHooks []OrganizationsLibraryHook

var organizationsLibraryBeforeUpdateHooks []OrganizationsLibraryHook
var organizationsLibraryAfterUpdateHooks []OrganizationsLibraryHook

var organizationsLibraryBeforeDeleteHooks []OrganizationsLibraryHook
var organizationsLibraryAfterDeleteHooks []OrganizationsLibraryHook

var organizationsLibraryBeforeUpsertHooks []OrganizationsLibraryHook
var organizationsLibraryAfterUpsertHooks []OrganizationsLibraryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationsLibrary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationsLibrary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationsLibrary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationsLibrary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationsLibrary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationsLibrary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationsLibrary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationsLibrary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationsLibrary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationsLibraryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationsLibraryHook registers your hook function for all future operations.
func AddOrganizationsLibraryHook(hookPoint boil.HookPoint, organizationsLibraryHook OrganizationsLibraryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organizationsLibraryAfterSelectHooks = append(organizationsLibraryAfterSelectHooks, organizationsLibraryHook)
	case boil.BeforeInsertHook:
		organizationsLibraryBeforeInsertHooks = append(organizationsLibraryBeforeInsertHooks, organizationsLibraryHook)
	case boil.AfterInsertHook:
		organizationsLibraryAfterInsertHooks = append(organizationsLibraryAfterInsertHooks, organizationsLibraryHook)
	case boil.BeforeUpdateHook:
		organizationsLibraryBeforeUpdateHooks = append(organizationsLibraryBeforeUpdateHooks, organizationsLibraryHook)
	case boil.AfterUpdateHook:
		organizationsLibraryAfterUpdateHooks = append(organizationsLibraryAfterUpdateHooks, organizationsLibraryHook)
	case boil.BeforeDeleteHook:
		organizationsLibraryBeforeDeleteHooks = append(organizationsLibraryBeforeDeleteHooks, organizationsLibraryHook)
	case boil.AfterDeleteHook:
		organizationsLibraryAfterDeleteHooks = append(organizationsLibraryAfterDeleteHooks, organizationsLibraryHook)
	case boil.BeforeUpsertHook:
		organizationsLibraryBeforeUpsertHooks = append(organizationsLibraryBeforeUpsertHooks, organizationsLibraryHook)
	case boil.AfterUpsertHook:
		organizationsLibraryAfterUpsertHooks = append(organizationsLibraryAfterUpsertHooks, organizationsLibraryHook)
	}
}

// One returns a single organizationsLibrary record from the query.
func (q organizationsLibraryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationsLibrary, error) {
	o := &OrganizationsLibrary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizations_libraries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationsLibrary records from the query.
func (q organizationsLibraryQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationsLibrarySlice, error) {
	var o []*OrganizationsLibrary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationsLibrary slice")
	}

	if len(organizationsLibraryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationsLibrary records in the query.
func (q organizationsLibraryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizations_libraries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationsLibraryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizations_libraries exists")
	}

	return count > 0, nil
}

// OrganizationsLibraries retrieves all the records using an executor.
func OrganizationsLibraries(mods ...qm.QueryMod) organizationsLibraryQuery {
	mods = append(mods, qm.From("`organizations_libraries`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`organizations_libraries`.*"})
	}

	return organizationsLibraryQuery{q}
}

// FindOrganizationsLibrary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationsLibrary(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrganizationsLibrary, error) {
	organizationsLibraryObj := &OrganizationsLibrary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `organizations_libraries` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationsLibraryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizations_libraries")
	}

	if err = organizationsLibraryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationsLibraryObj, err
	}

	return organizationsLibraryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationsLibrary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations_libraries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationsLibraryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationsLibraryInsertCacheMut.RLock()
	cache, cached := organizationsLibraryInsertCache[key]
	organizationsLibraryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationsLibraryAllColumns,
			organizationsLibraryColumnsWithDefault,
			organizationsLibraryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `organizations_libraries` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `organizations_libraries` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `organizations_libraries` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, organizationsLibraryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizations_libraries")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationsLibraryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for organizations_libraries")
	}

CacheNoHooks:
	if !cached {
		organizationsLibraryInsertCacheMut.Lock()
		organizationsLibraryInsertCache[key] = cache
		organizationsLibraryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationsLibrary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationsLibrary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationsLibraryUpdateCacheMut.RLock()
	cache, cached := organizationsLibraryUpdateCache[key]
	organizationsLibraryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationsLibraryAllColumns,
			organizationsLibraryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizations_libraries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `organizations_libraries` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, organizationsLibraryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, append(wl, organizationsLibraryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizations_libraries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizations_libraries")
	}

	if !cached {
		organizationsLibraryUpdateCacheMut.Lock()
		organizationsLibraryUpdateCache[key] = cache
		organizationsLibraryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationsLibraryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizations_libraries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizations_libraries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationsLibrarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsLibraryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `organizations_libraries` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationsLibraryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationsLibrary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationsLibrary")
	}
	return rowsAff, nil
}

var mySQLOrganizationsLibraryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationsLibrary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizations_libraries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationsLibraryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOrganizationsLibraryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationsLibraryUpsertCacheMut.RLock()
	cache, cached := organizationsLibraryUpsertCache[key]
	organizationsLibraryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationsLibraryAllColumns,
			organizationsLibraryColumnsWithDefault,
			organizationsLibraryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			organizationsLibraryAllColumns,
			organizationsLibraryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert organizations_libraries, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`organizations_libraries`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `organizations_libraries` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for organizations_libraries")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == organizationsLibraryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(organizationsLibraryType, organizationsLibraryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for organizations_libraries")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for organizations_libraries")
	}

CacheNoHooks:
	if !cached {
		organizationsLibraryUpsertCacheMut.Lock()
		organizationsLibraryUpsertCache[key] = cache
		organizationsLibraryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationsLibrary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationsLibrary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationsLibrary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationsLibraryPrimaryKeyMapping)
	sql := "DELETE FROM `organizations_libraries` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizations_libraries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizations_libraries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationsLibraryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationsLibraryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizations_libraries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations_libraries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationsLibrarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationsLibraryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsLibraryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `organizations_libraries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationsLibraryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationsLibrary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizations_libraries")
	}

	if len(organizationsLibraryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationsLibrary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationsLibrary(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationsLibrarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationsLibrarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationsLibraryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `organizations_libraries`.* FROM `organizations_libraries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, organizationsLibraryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationsLibrarySlice")
	}

	*o = slice

	return nil
}

// OrganizationsLibraryExists checks if the OrganizationsLibrary row exists.
func OrganizationsLibraryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `organizations_libraries` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizations_libraries exists")
	}

	return exists, nil
}

// Exists checks if the OrganizationsLibrary row exists.
func (o *OrganizationsLibrary) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrganizationsLibraryExists(ctx, exec, o.ID)
}
